{
    "config.color.mode": "Color mode.",
    "config.color.mode.Grammar": "Grammar color.",
    "config.color.mode.Semantic": "Semantic color. You may need to set `editor.semanticHighlighting.enabled` to `true` to take effect.",
    "config.completion.callParenthesess": "Autocompletes function parentheses like in Roblox Studio.",
    "config.completion.displayContext": "Previewing the relevant code snippet of the suggestion may help you understand the usage of the suggestion. The number set indicates the number of intercepted lines in the code fragment. If it is set to `0`, this feature can be disabled.",
    "config.completion.enable": "Enable completion.",
    "config.completion.keywordSnippet": "Shows keyword syntax snippets.",
    "config.completion.keywordSnippet.Both": "Shows `keyword` and `syntax snippet`.",
    "config.completion.keywordSnippet.Disable": "Only shows `keyword`.",
    "config.completion.keywordSnippet.Replace": "Only shows `syntax snippet`.",
    "config.completion.showParams": "Display parameters in completion list.",
    "config.completion.endAutocompletion": "Enable on type `end` autocompletion like in Roblox Studio.",
    "config.completion.workspaceWord": "Shows words within the workspace.",
    "config.completion.deprecatedMembers": "Shows deprecated members (Except duplicates).",
    "config.completion.alwaysShowMethods": "Show functions defined as methods without indexing them with colons.",
    "config.develop.debuggerPort": "Listen port of debugger.",
    "config.develop.debuggerWait": "Suspend before debugger connects.",
    "config.develop.enable": "Developer mode. Do not enable, performance will be affected.",
    "config.diagnostics.disable": "Disabled diagnostic (Use code in hover brackets).\n",
    "config.diagnostics.enable": "Enable diagnostics and syntax errors. Disabling this will not disable type checking.",
    "config.diagnostics.globals": "Defined global variables.\n",
    "config.diagnostics.neededFileStatus": "If you want to check only opened files, choice Opened; else choice Any.\n",
    "config.diagnostics.severity": "Modified diagnostic severity.\n",
    "config.diagnostics.workspaceDelay": "Latency (milliseconds) for workspace diagnostics. When you start the workspace, or edit any file, the entire workspace will be re-diagnosed in the background. Set to negative to disable workspace diagnostics.",
    "config.diagnostics.workspaceRate": "Workspace diagnostics run rate (%). Decreasing this value reduces CPU usage, but also reduces the speed of workspace diagnostics. The diagnosis of the file you are currently editing is always done at full speed and is not affected by this setting.",
    "config.hint.enable": "Enable inlay hints.",
    "config.hint.paramName": "Hint parameter names.",
    "config.hint.paramType": "Show type hints at the parameter of the function.",
    "config.hint.variableType": "Hint types at variables definitions.",
    "config.hint.setType": "Hint type at assignment operations.",
    "config.hint.returnType": "Hint return types at functions.",
    "config.hover.enable": "Enable hover.",
    "config.hover.enumsLimit": "When the value corresponds to multiple types, limit the number of types displaying.",
    "config.hover.fieldInfer": "When hovering to view a table, type infer will be performed for each field. When the accumulated time of type infer reaches the set value (MS), the type infer of subsequent fields will be skipped.",
    "config.hover.previewFields": "When hovering to view a table, limits the maximum number of previews for fields.",
    "config.hover.viewNumber": "Hover to view numeric content (only if literal is not decimal).",
    "config.hover.viewString": "Hover to view the contents of a string (only if the literal contains an escape character).",
    "config.hover.viewStringMax": "The maximum length of a hover to view the contents of a string.",
    "config.intelliSense.searchDepth": "Set the search depth for IntelliSense. Increasing this value increases accuracy, but decreases performance. Different workspace have different tolerance for this setting. Please adjust it to the appropriate value.",
    "config.intelliSense.autoDetectLibraries": "Auto-detect third party libraries like Roact and infer custom types.",
    "config.workspace.rojoProjectFile": "The name of the .project.json file without the extension. Set it empty to use all files found.",
    "config.workspace.loadMode": "What files should be preloaded.",
    "config.workspace.loadMode.allFiles": "Load all files in workspace.",
    "config.workspace.loadMode.rojoProject": "Load all files found in Rojo Project.",
    "config.workspace.loadRequiredFiles": "Load files without diagnostics when they are required by other files even if they are ignored.",
    "config.workspace.useRojoSourcemap": "Generate the instance tree for a rojo project using the rojo sourcemap command.",
    "config.workspace.rojoExecutablePath": "The absolute path to the rojo executable. Set it empty to use PATH.",
    "config.misc.color3Picker": "Enable Color Picker and Preview for Color3 functions.",
    "config.misc.serviceAutoImport": "Suggests Roblox Services that can be auto imported.",
    "config.misc.goToScriptLink": "If enabled, shows a link to the source script when requiring a module.",
	"config.misc.parameters": "[Command line parameters](https://github.com/sumneko/lua-telemetry-server/tree/master/method) when starting the language service in VSCode.",
    "config.misc.serverPort": "The port used to connect to the Roblox Studio Plugin. Set to 0 to disable.",
    "config.suggestedImports.enable": "Find and suggest auto-import of modules.",
    "config.suggestedImports.importScriptChildren": "Suggest require paths that index into scripts.",
    "config.suggestedImports.importIgnore": "Files and directories to never suggest when suggesting require paths. For example: `**/_Index/**` to ignore wally's index folder. (Use `.gitignore` grammar. Case sensitive. Acts on the absolute paths of files.)",
    "config.suggestedImports.importAlwaysAbsolute": "Files and directories that should always use absolute paths when suggesting imports. For example: `Packages/**` to always use absolute paths for the Packages folder. (Use `.gitignore` grammar. Case sensitive. Acts on the absolute paths of files.)",
    "config.suggestedImports.importPathType": "Whether to show relative or absolute require paths.",
    "config.suggestedImports.importPathType.Relative First": "Suggest only the relative path or the absolute path for each import, preferring the relative path unless it's unavailable.",
    "config.suggestedImports.importPathType.Shortest First": "Suggest only the shortest path out of the relative and absolute paths for each import.",
    "config.suggestedImports.importPathType.Relative Only": "Only suggest import paths relative to the current script.",
    "config.suggestedImports.importPathType.Absolute Only": "Only suggest absolute import paths.",
    "config.suggestedImports.importPathType.Both": "Suggest both relative and absolute paths for each import.",
    "config.runtime.fileEncoding": "File encoding. The `ansi` option is only available under the `Windows` platform.",
    "config.runtime.path": "`package.path`",
    "config.runtime.plugin": "(Proposed) Plugin path.",
    "config.signatureHelp.enable": "Enable signature help.",
    "config.signatureHelp.documentation": "Shows item documentation in signature help.",
    "config.window.progressBar": "Show progress bar in status bar.",
    "config.window.statusBar": "Show extension status in status bar.",
    "config.workspace.ignoreDir": "Ignored files and directories (Use `.gitignore` grammar).\n",
    "config.workspace.ignoreSubmodules": "Ignore submodules.",
    "config.workspace.library": "The directory path of the external function library.\nThe language service will additionally load the lua files in these directories, even if they are not in the current workspace, for definition, completion and other features.\n",
    "config.workspace.maxPreload": "Max preloaded files.",
    "config.workspace.preloadFileSize": "Skip files larger than this value (KB) when preloading.",
    "config.workspace.useGitIgnore": "Ignore files list in `.gitignore` .",
    "config.workspace.useFilesExclude": "Ignore files list in `files.ignore` .",
    "config.typeChecking.mode": "Type checking mode (EXPERIMENTAL).",
    "config.typeChecking.mode.disabled": "Disable type checking.",
    "config.typeChecking.mode.nonStrict": "Only check types that can be known explicitly.",
    "config.typeChecking.mode.strict": "Try to infer unknown types from their use.",
    "config.typeChecking.options": "Type checking options.",
    "config.typeChecking.options.union-bivariance": "Accept an union if it can be converted to another type or vice-versa. When checking if it contains a field, ignore if it can't be found in other types in the union. Disabled by default.",
    "config.typeChecking.options.ignore-extra-fields": "Ignore any extra fields in a table in comparison to another. Disabled by default.",
    "config.typeChecking.options.infer-instance-from-unknown": "Infer `Instance` from unknown fields of Instance classes, or `Instance | any` if the type is specifically `Instance`. Disabled by default.",
    "config.typeChecking.options.recursive-get-type": "When getting the explicit type of a variable, if it doesn't have one, check its value and successively. This option does nothing in Strict mode. Enabled by default.",
    "config.typeChecking.showFullType": "Always show the full types in type checking errors. (`Array<string>` to `{[number]: string}`)",
    "config.zzzzzz.cat": "DONT TOUCH ME, LET ME SLEEP >_<",
    "config.blank": ""
}