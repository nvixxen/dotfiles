/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CommandAliasPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/setting-tab.ts
var import_obsidian = require("obsidian");
var CommandAliasPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    let app = this.app;
    let options = { "": "--- command list ---" };
    for (const key in app.commands.commands) {
      if (!Object.prototype.hasOwnProperty.call(app.commands.commands, key)) {
        continue;
      }
      if (key.startsWith("obsidian-command-alias-plugin:")) {
        continue;
      }
      const command = app.commands.commands[key];
      options[key] = command.name;
    }
    containerEl.empty();
    containerEl.createEl("h2", { text: "Command alias" });
    let selectedCommandId = "";
    new import_obsidian.Setting(containerEl).setName("Select command").setDesc('*Obsolate*: Added useful commands. "Command Alias: Add command alias" does not require a manual reload of the plugin.').addDropdown((dropdown) => dropdown.addOptions(options).onChange((value) => {
      console.log("select command");
      selectedCommandId = value;
    }));
    let aliasName = "";
    new import_obsidian.Setting(containerEl).setName("Add alias").setDesc("Reload is required to apply.").addText((text) => text.setPlaceholder("alias name").onChange((value) => {
      aliasName = value.trim();
    })).addButton((button) => button.setButtonText("Add").onClick((e) => __async(this, null, function* () {
      if (selectedCommandId == "" || aliasName == "") {
        return;
      }
      this.plugin.addAliasSetting(aliasName, selectedCommandId);
      yield this.plugin.saveSettings();
      this.display();
    })));
    containerEl.createEl("h3", { text: "Command detection" });
    new import_obsidian.Setting(containerEl).setName("Maximum number of trials").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.commandDetection.maxTry).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
      this.plugin.settings.commandDetection.maxTry = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Trial interval (msec)").addSlider((slider) => slider.setLimits(100, 1e3, 100).setValue(this.plugin.settings.commandDetection.msecOfInterval).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
      this.plugin.settings.commandDetection.msecOfInterval = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h3", { text: "Register aliases" });
    for (const aliasId in this.plugin.settings.aliases) {
      if (!Object.prototype.hasOwnProperty.call(this.plugin.settings.aliases, aliasId)) {
        continue;
      }
      const alias = this.plugin.settings.aliases[aliasId];
      const command = app.commands.commands[alias.commandId];
      const commandName = command.name || "command missing";
      new import_obsidian.Setting(containerEl).setName(alias.name).setDesc(commandName).addButton((button) => button.setButtonText("Remove").onClick((e) => __async(this, null, function* () {
        delete this.plugin.settings.aliases[aliasId];
        yield this.plugin.saveSettings();
        this.display();
      })));
    }
  }
};

// src/add-alias-modal.ts
var import_obsidian2 = require("obsidian");
var CommandSuggestionModal = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    const appex = app;
    const items = [];
    for (const id in appex.commands.commands) {
      if (id.startsWith("obsidian-command-alias-plugin:alias:")) {
        continue;
      }
      items.push({
        id,
        name: appex.commands.commands[id].name
      });
    }
    this.items = items;
  }
  getItems() {
    return this.items;
  }
  getItemText(item) {
    return item.name;
  }
  onChooseItem(item, evt) {
    const m = new NamingModal({
      app: this.app,
      plugin: this.plugin,
      command: item
    });
    m.open();
  }
};
var NamingModal = class extends import_obsidian2.Modal {
  constructor(params) {
    const { app, plugin, command } = params;
    super(app);
    this.plugin = plugin;
    this.command = command;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: `Add alias: ${this.command.name}` });
    let aliasName = "";
    new import_obsidian2.Setting(contentEl).setName("Naming alias").addText((text) => text.setPlaceholder("add alias").onChange((value) => {
      aliasName = value.trim();
    })).addButton((button) => button.setButtonText("Add").onClick((e) => __async(this, null, function* () {
      if (aliasName === "") {
        new import_obsidian2.Notice("alias name is empty");
        return;
      }
      this.plugin.addAliasSetting(aliasName, this.command.id);
      yield this.plugin.saveSettings();
      this.close();
      this.plugin.unload();
      this.plugin.load();
    })));
    contentEl.find("input").focus();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  aliases: {},
  commandDetection: {
    maxTry: 5,
    msecOfInterval: 200
  }
};
function timeoutPromise(msec) {
  return __async(this, null, function* () {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(null);
      }, msec);
    });
  });
}
var CommandAliasPlugin = class extends import_obsidian3.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("loading plugin");
      yield this.loadSettings();
      this.addCommand({
        id: "add-alias",
        name: "Add command alias",
        callback: () => {
          const modal = new CommandSuggestionModal(this.app, this);
          modal.open();
        }
      });
      this.addSettingTab(new CommandAliasPluginSettingTab(this.app, this));
      const promises = [];
      for (const aliasId in this.settings.aliases) {
        if (!Object.prototype.hasOwnProperty.call(this.settings.aliases, aliasId)) {
          continue;
        }
        const p = this.addAliasCommand(aliasId);
        promises.push(p);
      }
      yield Promise.all(promises);
    });
  }
  addAliasCommand(aliasId) {
    return __async(this, null, function* () {
      const app = this.app;
      const { maxTry, msecOfInterval } = this.settings.commandDetection;
      const alias = this.settings.aliases[aliasId];
      const detection = () => __async(this, null, function* () {
        for (let tried = 0; tried < maxTry; tried += 1) {
          const ref = app.commands.commands[alias.commandId];
          if (ref != null) {
            return Promise.resolve(ref);
          }
          yield timeoutPromise(msecOfInterval);
        }
        return Promise.reject("Missing command");
      });
      const commandDetection = detection().then((target) => {
        const command = {
          id: `alias:${aliasId}`,
          name: `${alias.name}: ${target.name}`
        };
        if (target.callback) {
          command.callback = () => {
            const target2 = app.commands.commands[alias.commandId];
            if (target2) {
              target2.callback();
            } else {
              new import_obsidian3.Notice("Missing command. The command may be invalid.");
            }
          };
        }
        if (target.checkCallback) {
          command.checkCallback = (checking) => {
            const target2 = app.commands.commands[alias.commandId];
            if (target2) {
              return target2.checkCallback(checking);
            }
            if (checking) {
              return true;
            } else {
              new import_obsidian3.Notice("Missing command. The command may be invalid.");
            }
          };
        }
        this.addCommand(command);
      }).catch((reason) => {
        const command = {
          id: `alias:${aliasId}`,
          name: `${alias.name}: Missing command. Run this and try rebinding.`,
          callback: () => {
            this.unload();
            this.load();
          }
        };
        this.addCommand(command);
      });
      return commandDetection;
    });
  }
  onunload() {
    console.log("unloading plugin");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  addAliasSetting(aliasName, commandId) {
    const aliasId = Date.now().toString();
    console.log("Add id:", aliasId, "alias:", aliasName, "command:", commandId);
    this.settings.aliases[aliasId] = {
      name: aliasName,
      commandId
    };
  }
};
