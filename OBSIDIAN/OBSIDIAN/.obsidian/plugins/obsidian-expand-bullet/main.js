/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// transThemIndex.ts
__export(exports, {
  default: () => TransThemPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var import_language = __toModule(require("@codemirror/language"));
var DEFAULT_SETTINGS = {
  removeFirstLine: false,
  keepOriginalText: true
};
var TransThemPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.addMD = (noteName) => {
      return noteName.match(/\.MD$|\.md$/m) ? noteName : noteName + ".md";
    };
  }
  onload() {
    return __async(this, null, function* () {
      this.addSettingTab(new TransThemSettingTab(this.app, this));
      yield this.loadSettings();
      this.app.workspace.onLayoutReady(this.onLayoutReady.bind(this));
      this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor, view) => {
        const range = editor.getCursor();
        const beginRange = {
          ch: 0,
          line: range.line
        };
        const newRange = {
          ch: range.ch + 1,
          line: range.line
        };
        const bulletString = editor.getRange(beginRange, newRange);
        if (!/^\s*[-\*\+]\s?$/.test(bulletString)) {
          return;
        }
        menu.addItem((item) => item.setIcon("hash").setTitle(`Transfer bullet to note`).onClick(() => __async(this, null, function* () {
          yield this.createNoteWithBulletContent(editor, this.settings.removeFirstLine);
        })));
      }));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onLayoutReady() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "transform-bullet-into-note",
        name: "Transform bullet into note with first line",
        editorCallback: (editor) => {
          this.createNoteWithBulletContent(editor, this.settings.removeFirstLine);
        }
      });
    });
  }
  createNoteWithBulletContent(editor, removeFirstLine) {
    return __async(this, null, function* () {
      var _a;
      const view = editor.cm;
      const range = editor.getCursor();
      const currentLine = editor.getLine(range.line);
      if (!/^\s*[-\*\+]\s+/.test(currentLine)) {
        return;
      }
      const lineRange = this.calculateRangeForTransform(view.state, editor.posToOffset(range));
      if (!lineRange) {
        return;
      }
      const tokenForTabAndSpace = this.shouldReplaceToken(currentLine);
      const text = editor.getRange(editor.offsetToPos(lineRange.from), editor.offsetToPos(lineRange.to));
      if (!this.settings.keepOriginalText) {
        const titleText = currentLine.replace(/^(\s*[-\*\+]\s+)/, "");
        const linkText = titleText.replace(/(.*)?/, "[[$1]]");
        const contentBeginPositions = editor.offsetToPos(lineRange.from);
        const contentEndPositions = editor.offsetToPos(lineRange.to);
        editor.replaceRange(currentLine.replace(titleText, linkText), contentBeginPositions, contentEndPositions);
      }
      const content = this.shouldInsertContent(text, tokenForTabAndSpace, removeFirstLine);
      const newFileFolder = app.fileManager.getNewFileParent((_a = app.workspace.getActiveFile()) == null ? void 0 : _a.path).path;
      const newFilePath = (0, import_obsidian.normalizePath)(`${newFileFolder}${newFileFolder === "/" ? "" : "/"}${this.addMD(currentLine == null ? void 0 : currentLine.replace(/^\s*([-*+]|\d+\.)\s+/g, ""))}`);
      const createdFile = yield app.vault.create(newFilePath, content);
      yield app.workspace.getUnpinnedLeaf().openFile(createdFile);
    });
  }
  shouldInsertContent(text, token, removeFirstLine) {
    let tempContent = "";
    const spiltContentByLineBreak = text.split(/\r?\n/);
    if (token) {
      for (let i = 0; i < spiltContentByLineBreak.length; i++) {
        if (!i) {
          if (!removeFirstLine) {
            tempContent = spiltContentByLineBreak[0].replace(token, "");
          }
          continue;
        }
        if (removeFirstLine) {
          tempContent += i === 1 ? `${spiltContentByLineBreak[i].replace(token, "").replace(token[0], "")}` : `
${spiltContentByLineBreak[i].replace(token, "").replace(token[0], "")}`;
        } else {
          tempContent += `
${spiltContentByLineBreak[i].replace(token, "")}`;
        }
      }
      return tempContent;
    } else {
      if (!removeFirstLine) {
        return text;
      }
      let tempToken;
      if (spiltContentByLineBreak.length > 1) {
        tempToken = this.shouldReplaceToken(spiltContentByLineBreak[1]);
      }
      for (let i = 0; i < spiltContentByLineBreak.length; i++) {
        if (!i) {
          if (!removeFirstLine) {
            tempContent = spiltContentByLineBreak[0].replace(tempToken, "");
          }
          continue;
        }
        if (removeFirstLine) {
          tempContent += i === 1 ? `${spiltContentByLineBreak[i].replace(tempToken, "").replace(tempToken[0] === " " ? "" : "	", "")}` : `
${spiltContentByLineBreak[i].replace(tempToken, "").replace(tempToken[0] === " " ? "" : "	", "")}`;
        } else {
          tempContent += `
${spiltContentByLineBreak[i].replace(tempToken, "")}`;
        }
      }
      return tempContent;
    }
  }
  shouldReplaceToken(text) {
    const beginWithTab = text.startsWith("	");
    const beginWithSpace = text.startsWith(" ");
    if (!beginWithSpace && !beginWithTab) {
      return null;
    }
    const tabAndSpace = text.match(/^\s*/g)[0];
    return tabAndSpace;
  }
  calculateRangeForTransform(state, pos) {
    const line = state.doc.lineAt(pos);
    const foldRange = (0, import_language.foldable)(state, line.from, line.to);
    if (!foldRange && /^\s*([-*+]|\d+\.)\s+/.test(line.text)) {
      return { from: line.from, to: line.to };
    }
    if (!foldRange) {
      return null;
    }
    return { from: line.from, to: foldRange.to };
  }
};
var TransThemSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.applyDebounceTimer = 0;
    this.plugin = plugin;
  }
  applySettingsUpdate() {
    clearTimeout(this.applyDebounceTimer);
    const plugin = this.plugin;
    this.applyDebounceTimer = window.setTimeout(() => {
      plugin.saveSettings();
    }, 100);
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Menu Them" });
    new import_obsidian.Setting(containerEl).setName("Remove First Line when Create Note").setDesc("remove first bullet line when create new note").addToggle((toggle) => toggle.setValue(this.plugin.settings.removeFirstLine).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.removeFirstLine = value;
      this.applySettingsUpdate();
    })));
    new import_obsidian.Setting(containerEl).setName("Keep Original Text").setDesc("keep original text when create new note").addToggle((toggle) => toggle.setValue(this.plugin.settings.keepOriginalText).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.keepOriginalText = value;
      this.applySettingsUpdate();
    })));
  }
};
